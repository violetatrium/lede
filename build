#!/bin/bash

MY_DIR=$(dirname "$0")
cd "$MY_DIR"
MY_DIR="$PWD"
MY_NAME="$0"

if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
  echo "Usage: $MY_NAME [-d|-e] <TARGET_NAME>"
  echo "Usage: $MY_NAME [-D|-h|--help]"
  echo "TARGET_NAME - hardware type to build the image for"
  echo "-d - make debug build of the agent"
  echo "-D - recompile the agent binary only, debug is ON, no new firmware"
  echo "     (requires full build prior to the first use and rebuilds unum"
  echo "     agent for that prior build TARGET_NAME)"
  echo "-e - buld with -j1 to see all errors"
  echo "-A - recompile the agent binary only, debug is OFF, no new firmware"
  echo "     (requires full build prior to the first use and rebuilds unum"
  echo "     agent for that prior build TARGET_NAME)"
  echo "-h/--help - this help"
  echo "Available targets:"
  ls -1 | sed -e 's/\.diffconfig//;tx;d;:x'
  echo "You can set MINIM_DEFAULT_TARGET environment variable in the"
  echo "shell to the name of the target you want the script to pick"
  echo "automatically if nothing is specified on the command line."
  echo "The agent repository should be accessible under ../unum-sdk"
  echo "or in the location pointed to by MINIM_UNUM_DIR environment"
  echo "variable."
  exit 1
fi

while [ "${1:0:1}" == "-" ]; do
case $1 in
  -d)
  echo "Turning debug ON"
  export UNUM_DEBUG=1
  shift
  ;;
  -D)
  echo "Recompiling the agent binary"
  export UNUM_DEBUG=1
  AGENT_ONLY=1
  shift
  ;;
  -A)
  echo "Recompiling the agent binary"
  AGENT_ONLY=1
  shift
  ;;
  -e)
  echo "Building with -j1"
  NUM_CORES=1
  shift
  ;;
  *)
  echo "Unrecognized option $1"
  echo "See $MY_NAME -h output for help"
  exit 2
  ;;
esac
done

BUILD_TARGET=${1:-$MINIM_DEFAULT_TARGET}

if [ "$AGENT_ONLY" == "1" ]; then
  if [ ! -e .config ]; then
    echo "Cannot find .config file"
    exit 3
  fi
  BUILD_TARGET=$(cat .config | sed -n -e 's/CONFIG_VERSION_PRODUCT="\(.*\)"/\1/p')
  BUILD_TARGET_HWREV=$(cat .config | sed -n -e 's/CONFIG_VERSION_HWREV="\(.*\)"/\1/p')
  [ -z "$BUILD_TARGET_HWREV" ] || BUILD_TARGET=${BUILD_TARGET}_${BUILD_TARGET_HWREV}
  echo "Using build target from .config: $BUILD_TARGET"
fi

if [ "$BUILD_TARGET" == "" ] || [ ! -e "$BUILD_TARGET.diffconfig" ]; then
  echo "Invalid build target, use -h or run one of those:"
  ls -1 | sed -e 's/\(.*\)\.diffconfig/export MINIM_DEFAULT_TARGET=\1/;tx;d;:x'
  exit 2
fi

NUM_CORES=${NUM_CORES:-$(grep -c ^processor /proc/cpuinfo)}
DATETIME=`date +"%y%m%d.%H%M.%S.0" | sed -E 's/\b0+([1-9][0-9]*)\b/\1/g'`
export MINIM_VERSION_NUMBER=${MINIM_VERSION_NUMBER:-$DATETIME}
export MINIM_UNUM_DIR=${MINIM_UNUM_DIR:-"$MY_DIR/../unum-sdk"}
export MINIM_DEFAULT_TARGET=$BUILD_TARGET
export MINIM_VERSION_NICK="LEDE"
export MINIM_VERSION_CODE=`git rev-parse --short HEAD`

# Make sure the unum agent files are present
UNUM_MAKEFILE="$MINIM_UNUM_DIR/src/unum/unum-lede_generic.mk"
if [ ! -e "$UNUM_MAKEFILE" ]; then
  echo "Unable to find: $UNUM_MAKEFILE"
  echo "Please set enviroment var MINIM_UNUM_DIR to point to"
  echo "the location of the Unum SDK files, for example:"
  echo "MINIM_UNUM_DIR=/work/unum-sdk ./build gl_b1300"
  exit -1
fi

# From now on stop on any error
set -e

if [ "$AGENT_ONLY" == "1" ]; then
  make -j1 V=s package/unum/{clean,compile}
  exit $?
fi

#echo "Cleanup the ./tmp/info folder..."
#rm -f ./tmp/info/*

echo "Updating feeds"
./scripts/feeds update -a
./scripts/feeds install -a

echo "Building the .config file..."
if [ -e "$BUILD_TARGET.baseconfig" ]; then 
  cp -f "$BUILD_TARGET.baseconfig" .config
else
  rm .config
fi
cat minim.baseconfig >> .config
cat "$BUILD_TARGET.diffconfig" >> .config
make defconfig

echo "Cleaning up target folder..."
eval `grep CONFIG_TARGET_BOARD= .config`
eval `grep CONFIG_TARGET_SUBTARGET= .config`
BOARD=$CONFIG_TARGET_BOARD
SUBTARGET=${CONFIG_TARGET_SUBTARGET:-generic}
if [ "$BOARD" == "" ] || [ "$SUBTARGET" == "" ]; then
  echo "Unable to determine BOARD and SUBTARGET names for the build!"
  exit 3
else
  FIRMWARE_DIR="$MY_DIR"/bin/targets/$BOARD/$SUBTARGET
  echo "Firmware folder: $FIRMWARE_DIR"
  rm -Rf "$FIRMWARE_DIR"/*
fi

echo "Clean our agent package before rebuild..."
make V=s package/unum/clean

# OpenWrt multicpu builds rarely work from the first try,
# so we try to catch errors retry and finally run with -j1
# if everything else fails.

echo "Downloading..."
if [ $NUM_CORES -gt 1 ]; then
  make -j$NUM_CORES download || make -j1 V=s download
else
  make -j1 V=s download
fi

echo "Building the firmware..."
if [ $NUM_CORES -gt 1 ]; then
  make -j$NUM_CORES || make -j1 V=s
else
  make -j1 V=s
fi

echo
echo "Firmware file(s):"
files=`find $FIRMWARE_DIR -name *-sysupgrade*.bin`
if [ "$files" != "" ]; then
  ls -l "$FIRMWARE_DIR"/*-sysupgrade*.bin
else
  # No sysuprade file. Check if it is trx file (say for Broadcom)
  fw_file=`echo $BUILD_TARGET | sed 's/_/-/g'`
  ls -l "$FIRMWARE_DIR"/*"$fw_file"*-*squashfs.trx
fi

echo "Upgrade AP from the shell by running:"
echo "./upgrade.sh <AP_IP_ADDRESS> <AP_PASSWORD>"
echo "Note: upgrade requres the build .config file!"
