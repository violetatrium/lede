#!/bin/sh /etc/rc.common
PKG_VERSION=

export START=94
export USE_PROCD=1

readonly A_TMP='/var/hosts.allowed.tmp'
readonly B_TMP='/var/hosts.blocked.tmp'
readonly T_TMP='/var/simple-adblock.hosts'
readonly dl='wget --no-check-certificate -qO-'
readonly h_filter='/localhost/d;/^#/d;/^[^0-9]/d;s/^0\.0\.0\.0.//;s/^127\.0\.0\.1.//;s/[[:space:]]*#.*$//;s/[[:cntrl:]]$//;s/[[:space:]]//g;/[`~!@#\$%\^&\*()=+;:"'\'',<>?/\|[{}]/d;/]/d;/\./!d;/^$/d;'
readonly d_filter='/^#/d;s/[[:space:]]*#.*$//;s/[[:space:]]*$//;s/[[:cntrl:]]$//;/[[:space:]]/d;/[`~!@#\$%\^&\*()=+;:"'\'',<>?/\|[{}]/d;/]/d;/\./!d;/^$/d;'
readonly f_filter='s|^|local=/|;s|$|/|'
readonly _OK_='\033[0;32m\xe2\x9c\x93\033[0m'
readonly _FAIL_='\033[0;31m\xe2\x9c\x97\033[0m'
readonly __OK__='\033[0;32m[\xe2\x9c\x93]\033[0m'
readonly __FAIL__='\033[0;31m[\xe2\x9c\x97]\033[0m'
readonly _ERROR_='\033[0;31mERROR\033[0m'

export EXTRA_COMMANDS="check killcache"
export EXTRA_HELP="	check	Checks if specified <string> is found in current blacklist"

readonly packageName='simple-adblock'
readonly serviceName="$packageName $PKG_VERSION"
ok() { case $verbosity in 1) output "$_OK_";; 2) output "$__OK__\n";; esac; }
okn() { case $verbosity in 1) output "$_OK_\n";; 2) output "$__OK__\n";; esac; }
fail() { case $verbosity in 1) output "$_FAIL_";; 2) output "$__FAIL__\n";; esac; }
failn() { case $verbosity in 1) output "$_FAIL_\n";; 2) output "$__FAIL__\n";; esac; }
output() { [[ $# -ne 1 ]] && { [[ ! $((verbosity & $1)) -gt 0 ]] && return 0 || shift; }; local msg; msg=$(echo -n "${1/$serviceName /service }" | sed 's|\\033\[[0-9]\?;\?[0-9]\?[0-9]\?m||g'); [[ -t 1 ]] && echo -e -n "$1"; [[ $(echo -e -n "$msg" | wc -l) -gt 0 ]] && logger -t "${packageName:-service} [$$]" "$(echo -e -n ${logmsg}${msg})" && logmsg='' || logmsg=${logmsg}${msg}; }
led_on(){ [[ -n "$led" && -e "$led/trigger" ]] && echo "default-on" > "$led/trigger"; }
led_off(){ [[ -n "$led" && -e "$led/trigger" ]] && echo "none" > "$led/trigger"; }
export serviceEnabled verbosity force_dns debug led wan_if wan_gw wanphysdev hosts_file

boot() { ( sleep 120 && rc_procd start_service && rc_procd service_triggers | cat &); }

load_package_config() {
	config_load "$packageName"
	config_get_bool serviceEnabled 'config' 'enabled' 1
	config_get_bool force_dns      'config' 'force_dns' 1
	config_get_bool debug          'config' 'debug' 0
	config_get verbosity           'config' 'verbosity' '2'
	config_get hosts_file  	       'config' 'hosts_file' "/var/dnsmasq.d/${packageName}"
	config_get led        	       'config' 'led'
	source 	/lib/functions/network.sh
}

is_enabled() {
		local sleepCount=1
		load_package_config

		if [ "$debug" -ne 0 ]; then
			exec 1>>/tmp/simple-adblock.log
			exec 2>&1
			set -x
		fi

		led="${led:+/sys/class/leds/$led}"
		[ $serviceEnabled -gt 0 ] || return 1
		while : ; do
			network_flush_cache; network_find_wan wan_if;	network_get_gateway wan_gw $wan_if;
			[[ $sleepCount -ge 25 || -n "$wan_gw" ]] && break
			output "$serviceName waiting for wan gateway...\n"; sleep 2; let "sleepCount+=1";
		done
		[ -n "$wan_gw" ] && return 0
		output "$_ERROR_: $serviceName failed to discover WAN gateway.\n"; return 1;
}

iptables_destroy() {
  [ $force_dns -eq 0 ] && return 0
	[ -z "$packageName" ] && return 1
	iptables-save | grep -Fv -- "$packageName" | iptables-restore
	lsmod | grep -q ip6table_nat && ip6tables-save | grep -Fv -- "$packageName" | ip6tables-restore
	[ -z "$1" ] && output 'No longer forcing local DNS server.\n'
}

iptables_create() {
	local ip ipv6 label ipv6wan brname
	network_get_ipaddr ip lan; network_get_ipaddr6 ipv6 lan; network_get_device brname lan; network_get_physdev wanphysdev wan;
	ipv6wan=$(ifconfig $wanphysdev | grep inet6 | awk '{print $3}')

	iptables_destroy 'quiet'
	if [ $force_dns -ne 0 ]; then
		[ -n "$ip" ] && iptables -t nat -A prerouting_rule -i $brname -p tcp --dport 53 -j DNAT --to $ip -m comment --comment "$packageName"
		[ -n "$ip" ] && iptables -t nat -A prerouting_rule -i $brname -p udp --dport 53 -j DNAT --to $ip -m comment --comment "$packageName"
		if [[ -n "$ipv6" && -n "$ipv6wan" ]] && lsmod | grep -q ip6table_nat; then
			ip6tables -t nat -A PREROUTING -i $brname -p tcp --dport 53 -j DNAT --to-destination [$ipv6] -m comment --comment "$packageName"
			ip6tables -t nat -A PREROUTING -i $brname -p udp --dport 53 -j DNAT --to-destination [$ipv6] -m comment --comment "$packageName"
			label="$ip/$ipv6"
		else
			label="$ip"
		fi
		if [ -z "$1" ]; then
			if [ -n "$label" ]; then
				output "Forcing local DNS server: $label.\n"
			else
				output "$_ERROR_: $serviceName failed to obtain LAN IP address for DNS forcing!\n"
			fi
		fi
	fi
}

stop_adblocking() {
	load_package_config
  [ -f $hosts_file ] && mv $hosts_file $T_TMP
  output 3 "Restarting dnsmasq "
	led_off
  /etc/init.d/dnsmasq restart >/dev/null 2>&1
	if [[ $? -eq 0 ]]; then
		okn; output "$serviceName stopped.\n";
	else
		failn; output "$_ERROR_: $serviceName failed to reload dnsmasq!\n";
	fi
}

process_url() {
	local label type D_TMP R_TMP
	[[ -n "$1" && -n "$2" && -n "$3" ]] || return 1
	local url=$1
	[ "$2" == "hosts" ] && label="Hosts: $(echo $1 | cut -d'/' -f3)" filter="$h_filter" || label="Domains: $(echo $1 | cut -d'/' -f3)" filter="$d_filter"
	[ "$3" == "blocked" ] && { type='Blocked'; D_TMP="$B_TMP"; } || { type='Allowed'; D_TMP="$A_TMP"; }
	R_TMP="/var/simple-adblock_$(head -c40 /dev/urandom 2>/dev/null | tr -dc 'A-Za-z0-9' 2>/dev/null)"
	while [ -e "$R_TMP" ]; do R_TMP="/var/simple-adblock_$(head -c40 /dev/urandom 2>/dev/null | tr -dc 'A-Za-z0-9' 2>/dev/null)"; done
	touch "$R_TMP"
    output 2 "[DL] $type $label "
    $dl "${url}" > "$R_TMP" 2>/dev/null && ok || fail
	{ sed -i "$filter" "$R_TMP"; cat "$R_TMP" >> "$D_TMP"; rm -f "$R_TMP"; } &
}

start_adblocking() {
		local whitelist_domains blacklist_domains whitelist_domains_urls blacklist_domains_urls blacklist_hosts_urls
    config_get whitelist_domains          'config' 'whitelist_domain'
    config_get blacklist_domains          'config' 'blacklist_domain'
    config_get whitelist_domains_urls     'config' 'whitelist_domains_url'
    config_get blacklist_domains_urls     'config' 'blacklist_domains_url'
    config_get blacklist_hosts_urls       'config' 'blacklist_hosts_url'

    local hf w_filter

	[ ! -d ${hosts_file%/*} ] && mkdir -p ${hosts_file%/*}
	[ ! -f "$hosts_file" ] && touch "$hosts_file"
	if [[ -s $T_TMP && ! "$1" == "reload" ]]; then
		output 3 'Found existing data file, reusing it '
		mv $T_TMP $hosts_file && okn || failn
	else
		[ -f $A_TMP ] && rm -f $A_TMP; [ -f $B_TMP ] && rm -f $B_TMP; [ -f $T_TMP ] && rm -f $T_TMP; [ -f $hosts_file ] && rm -f $hosts_file;
		if [ "$(awk '/^MemFree/ {print int($2/1000)}' "/proc/meminfo")" -lt 32 ]; then
			output 1 'Low free memory, restarting dnsmasq...'
			/etc/init.d/dnsmasq restart >/dev/null 2>&1 && okn || failn
		fi
    touch $A_TMP; touch $B_TMP; touch $T_TMP;
    if [ -n "$blacklist_hosts_urls" ]; then
	    output 1 '[DL] Blocked Hosts '
	    for hf in ${blacklist_hosts_urls}; do process_url "$hf" 'hosts' 'blocked'; done
			output 1 '\n'
		fi
    if [ -n "$blacklist_domains_urls" ]; then
	    output 1 '[DL] Blocked Domains '
	    for hf in ${blacklist_domains_urls}; do process_url "$hf" 'domains' 'blocked'; done
			output 1 '\n'
		fi
    if [ -n "$whitelist_domains_urls" ]; then
	    output 1 '[DL] Allowed Domains '
	    for hf in ${whitelist_domains_urls}; do process_url "$hf" 'domains' 'allowed'; done
			output 1 '\n'
		fi
		output 3 'Waiting for background processes '
		wait && okn
    [ -n "$blacklist_domains" ] && for hf in ${blacklist_domains}; do echo "$hf" | sed "$d_filter" >> $B_TMP; done
    whitelist_domains="${whitelist_domains}"$'\n'"$(cat $A_TMP)"
    [ -n "$whitelist_domains" ] && for hf in ${whitelist_domains}; do hf=$(echo $hf | sed 's/\./\\./g'); w_filter="$w_filter/^${hf}$/d;/\\.${hf}$/d;"; done
		if [ -s $B_TMP ]; then
		    output 1 'Processing downloads '
		    output 2 'Sorting merged file '; sort $B_TMP | uniq > $T_TMP && ok || fail
		    output 2 'Whitelisting domains '; sed -i "$w_filter" $T_TMP && ok || fail
		    output 2 'Formatting merged file '; sed "$f_filter" $T_TMP > $B_TMP && mv $B_TMP $hosts_file && ok || fail
		    output 1 '\n'
		    output 3 'Removing temporary files '
			[ -f $A_TMP ] && rm -f $A_TMP; [ -f $B_TMP ] && rm -f $B_TMP; [ -f $T_TMP ] && rm -f $T_TMP;
 		    okn
		fi
	fi

	if [ -s $hosts_file ]; then
		output 3 'Restarting dnsmasq '
		/etc/init.d/dnsmasq restart >/dev/null 2>&1
		if [[ $? -eq 0 ]]; then
			led_on; okn;
			output "$serviceName blocking $(wc -l < $hosts_file) domains $_OK_\n"
		else
			failn; output "$_ERROR_: $serviceName failed to reload dnsmasq!\n";
			exit 1
		fi
	else
		output "$_ERROR_: $serviceName failed to create its data file!\n"
		exit 1
	fi
}

check() {
	load_package_config
	local string="$1"
	if [ ! -f $hosts_file ]; then
		echo "No local blacklist ($hosts_file) found."
	elif [ -z "$string" ]; then
		echo "Usage: /etc/init.d/${serviceName} check <string>"
	elif grep -m1 -q $string $hosts_file; then
		echo "Found $(grep $string $hosts_file | wc -l) matches for $string in $hosts_file:"
		grep $string $hosts_file | sed 's|local=/||;s|/$||;'
	else
		echo "The $string is not found in current blacklist."
	fi
}

start_service() {
  is_enabled || return 1
	if [ -f "$hosts_file" ]; then
		output "Reloading $serviceName...\n"
		iptables_create 'quiet'
		start_adblocking 'reload'
	else
		output "Starting $serviceName...\n"
		iptables_create
		start_adblocking
	fi
}

stop_service() {
  load_package_config
	output "Stopping $serviceName...\n"
	iptables_destroy
	stop_adblocking
}

killcache() { [ -s $T_TMP ] && rm -f $T_TMP; }
