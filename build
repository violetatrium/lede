#!/bin/bash

MY_DIR=$(dirname "$0")
cd "$MY_DIR"
MY_DIR="$PWD"
MY_NAME="$0"

if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
  echo "Usage: $MY_NAME [-d|-e|-D|-h|--help] [TARGET_NAME]"
  echo "TARGET_NAME - hardware type to build the image for"
  echo "-d - make debug build of the agent"
  echo "-D - recompile the agent ibinary only, debug is ON, no new firmware"
  echo "-e - buld with -j1 to see errors"
  echo "-h/--help - this help"
  echo "Available targets:"
  ls -1 | sed -e 's/\.diffconfig//;tx;d;:x'
  echo "You can set MINIM_DEFAULT_TARGET environment variable in the"
  echo "shell to the name of the target you want the script to pick"
  echo "automatically if nothing is specified on the command line."
  echo "The agent repository should be accessible under ../unum-v2"
  echo "or in the location pointed to by MINIM_UNUM_DIR environment"
  echo "variable."
  exit 1
fi

while [ "${1:0:1}" == "-" ]; do
case $1 in
  -d)
  echo "Turning debug ON"
  export UNUM_DEBUG=1
  shift
  ;;
  -D)
  echo "Recompiling the agent binary"
  export UNUM_DEBUG=1
  AGENT_ONLY=1
  shift
  ;;
  -e)
  echo "Building with -j1"
  NUM_CORES=1
  shift
  ;;
  *)
  echo "Unrecognized option $1"
  echo "See $MY_NAME -h output for help"
  exit 2
  ;;
esac
done

BUILD_TARGET=${1:-$MINIM_DEFAULT_TARGET}
if [ "$BUILD_TARGET" == "" ] || [ ! -e "$BUILD_TARGET.diffconfig" ]; then
  echo "Invalid build target, use -h or run one of those:"
  ls -1 | sed -e 's/\(.*\)\.diffconfig/export MINIM_DEFAULT_TARGET=\1/;tx;d;:x'
  exit 2
fi

NUM_CORES=${NUM_CORES:-$(grep -c ^processor /proc/cpuinfo)}
DATETIME=`date +"%y%m%d.%H%M.%S.0" | sed -E 's/\b0+([1-9][0-9]*)\b/\1/g'`
export MINIM_VERSION_NUMBER=${MINIM_VERSION_NUMBER:-$DATETIME}
export MINIM_UNUM_DIR=${MINIM_UNUM_DIR:-"$MY_DIR/../unum-v2"}
export MINIM_DEFAULT_TARGET=$BUILD_TARGET
export MINIM_VERSION_NICK="LEDE"
export MINIM_VERSION_CODE=`git rev-parse --short HEAD`

# From now on stop on any error
set -e

if [ "$AGENT_ONLY" == "1" ]; then
  make -j1 V=s package/unum/{clean,compile}
  exit $?
fi

#echo "Cleanup the ./tmp/info folder..."
#rm -f ./tmp/info/*

echo "Updating feeds"
./scripts/feeds update -a
./scripts/feeds install -a

echo "Building the .config file..."
if [ -e "$BUILD_TARGET.baseconfig" ]; then 
  cp -f "$BUILD_TARGET.baseconfig" .config
else
  rm .config
fi
cat minim.baseconfig >> .config
cat "$BUILD_TARGET.diffconfig" >> .config
make defconfig

echo "Cleaning up target folder..."
eval `grep CONFIG_TARGET_BOARD= .config`
eval `grep CONFIG_TARGET_SUBTARGET= .config`
BOARD=$CONFIG_TARGET_BOARD
SUBTARGET=${CONFIG_TARGET_SUBTARGET:-generic}
if [ "$BOARD" == "" ] || [ "$SUBTARGET" == "" ]; then
  echo "Unable to determine BOARD and SUBTARGET names for the build!"
  exit 3
else
  FIRMWARE_DIR="$MY_DIR"/bin/targets/$BOARD/$SUBTARGET
  echo "Firmware folder: $FIRMWARE_DIR"
  rm -Rf "$FIRMWARE_DIR"/*
fi

echo "Clean our agent package before rebuild..."
make V=s package/unum/clean

#Replace LEDE files with ours if needed
cmp --silent ../unum-v2/files/lede_generic/mac80211.sh \
	package/kernel/mac80211/files/lib/wifi/mac80211.sh \
	|| cp ../unum-v2/files/lede_generic/mac80211.sh \
		package/kernel/mac80211/files/lib/wifi/mac80211.sh

echo "Building the firmware..."
make -j$NUM_CORES V=s

echo
echo "Firmware file(s):"
ls -l "$FIRMWARE_DIR"/*-sysupgrade*.bin

echo "Upgrade AP from the shell by running:"
echo "./upgrade.sh <AP_IP_ADDRESS> <AP_PASSWORD>"
echo "Note: upgrade requres the build .config file!"
